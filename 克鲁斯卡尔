#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

// 边的结构体
struct Edge {
    int u, v, w;
    bool operator<(const Edge& other) const {
        return w < other.w;
    }
};

// 并查集查找函数
int find(vector<int>& fa, int x) {
    while (x != fa[x]) {
        fa[x] = fa[fa[x]];
        x = fa[x];
    }
    return x;
}

// Kruskal 算法
int kruskal(int n, vector<Edge>& edges) {
    vector<int> fa(n + 1);
    for (int i = 1; i <= n; ++i) {
        fa[i] = i;
    }
    sort(edges.begin(), edges.end());
    int ans = 0, cnt = 0;
    for (const Edge& edge : edges) {
        int eu = find(fa, edge.u);
        int ev = find(fa, edge.v);
        if (eu != ev) {
            ans += edge.w;
            fa[ev] = eu;
            if (++cnt == n - 1) {
                break;
            }
        }
    }
    return ans;
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<Edge> edges(m);
    for (int i = 0; i < m; ++i) {
        cin >> edges[i].u >> edges[i].v >> edges[i].w;
    }
    int result = kruskal(n, edges);
    cout << result << endl;
    return 0;
}    
