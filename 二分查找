#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int search(const vector<int>& nums, int i, int C, int n) {
    int left = i + 1, right = n - 1;
    int count = 0;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] - nums[i] == C) {
            int l = mid;
            while (l > left && nums[l - 1] - nums[i] == C) {
                l--;
            }
            int r = mid;
            while (r < right && nums[r + 1] - nums[i] == C) {
                r++;
            }
            count += r - l + 1;
            break;
        }
        else if (nums[mid] - nums[i] > C) {
            right = mid - 1;
        } 
        else {
            left = mid + 1;
        }
    }
    return count;
}
int main() {
    int N, C;
    cin >> N >> C;
    vector<int> a(N);
    for (int i = 0; i < N; i++) {
        cin >> a[i];
    }
    sort(a.begin(), a.end());

    int ans = 0;
    for (int i = 0; i < N; i++) {
        ans += search(a, i, C, N);
    }

    cout << ans << endl;
    return 0;
}






//查找第一个大于等于k的位置

 int l=1,r=n,mid;
        while(l<=r){
            mid=(l+r)>>1;
            if(a[i]<=f[mid])r=mid-1;  // 目标位置在左半部分
            else l=mid+1;             // 目标位置在右半部分
        }
        
        f[l]=a[i];  //
l指针会停留在符合题意位置上且l最终=r+1//若没找到则l=n+1;

查找最后一个小于等于k的位置//去掉等于号则为找最后一个小于k的位置;
int findFirstLessOrEqual(int k, int a[], int n) {
    int l = 1, r = n, mid;
    int result = -1; // 初始化为-1，表示没有找到小于等于k的值
    
    while (l <= r) {
        mid = (l + r) >> 1;
        if (a[mid] <= k) {
            result = mid;    // 记录当前可能的答案
            l = mid + 1;     // 尝试在右半部分寻找更大的位置
        } else {
            r = mid - 1;     // 当前值大于k，在左半部分继续查找
        }
    }
    
    return result;
}









