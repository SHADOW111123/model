//记忆:访问寻找dist最小顶点，将其vis改为1，再不断更新其周围顶点的dist，vis不改变，方便后续更新;若一个点的vis是1，那么它的最短路径已经确定，因为每一步选择的路径就是所有路径中最短的：
#include <iostream>
#include <vector>
#include <limits>

const int INF = std::numeric_limits<int>::max();

// 迪杰斯特拉算法
void dijkstra(int n, int m, int s, std::vector<std::vector<int>>& graph) {
    std::vector<int> dist(n + 1, INF);
    std::vector<bool> visited(n + 1, false);

    dist[s] = 0;
    for (int count = 0; count < n; ++count)
    {
        int minDist = INF, minIndex;
        // 找到未访问顶点中距离最小的顶点
        for (int v = 1; v <= n; ++v) 
        {
            if (!visited[v] && dist[v] < minDist) {
                minDist = dist[v];
                minIndex = v;
            }
        }

        visited[minIndex] = true;
        // 更新相邻顶点的距离
        for (int v = 1; v <= n; ++v) 
        {
            if (!visited[v] && graph[minIndex][v] != INF && dist[minIndex] + graph[minIndex][v] < dist[v])
            {

                dist[v] = dist[minIndex] + graph[minIndex][v];
            }
        }
    }

    // 输出结果
    for (int i = 1; i <= n; ++i) {
        if (dist[i] == INF) {
            std::cout << (1 << 31) - 1 << " ";
        }
        else {
            std::cout << dist[i] << " ";
        }
    }
}

int main() {
    int n, m, s;
    std::cin >> n >> m >> s;
    // 邻接矩阵初始化
    std::vector<std::vector<int>> graph(n + 1, std::vector<int>(n + 1, INF));
    for (int i = 0; i < m; ++i) {
        int u, v, w;
        std::cin >> u >> v >> w;
        // 可能存在重边，取最小值
        if (w < graph[u][v]) {
            graph[u][v] = w;
        }
    }
    dijkstra(n, m, s, graph);
    return 0;
}


//堆优化
#include<iostream>
#include <cmath>
#include <algorithm>
#include <map>
#include<vector>
#include <string>
#include<functional>
#include <set>
#include<cmath>
#include<climits>
#pragma comment(linker, "/STACK:1024000000,1024000000")
#include<queue>
using namespace std;
#define int long long
int n, m, s;
struct node
{
    int to;
    int val;
    node(int a, int b)
    {
        to = a;
        val = b;
    }

};
auto cmp = [](const node& a, const node& b) { return a.val > b.val; };//


void dij(vector<vector<node>>& p, int s)
{
    priority_queue<node, vector<node>, decltype(cmp) >pq(cmp);
    int* dist = new int[n + 1];
    int* vis = new int[n + 1];
    fill(dist + 1, dist + n + 1, LLONG_MAX);
    fill(vis + 1, vis + n + 1, 0);
    pq.push(node(s, 0));
    dist[s] = 0;
    while (!pq.empty())
    {
        int u = pq.top().to;
        int v = pq.top().val;
        pq.pop();
        if (vis[u])
        {
            continue;
        }
        vis[u] = 1;
        for (const node& nod : p[u])
        {
            int v1 = nod.to;
            int valu = nod.val;

            if (dist[v1] > valu + dist[u])
            {
                dist[v1] = valu + dist[u];
                pq.push(node(v1, dist[v1]));
            }


        }




    }

    for (int i = 1; i <= n; i++)
    {
        if (dist[i] == LLONG_MAX)
        {
            cout << "不可达"<<" ";
        }
        else
        {
            cout << dist[i] << " ";
        }
    }


    delete[] vis;
    delete[] dist;
}

signed  main()
{


    cin >> n >> m >> s;
    vector<vector<node>>p(n + 1);

    for (int i = 1; i <= m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        p[a].push_back(node(b, c));
    }
    
    dij(p, s);




    return 0;
}

