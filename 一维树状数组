性质 1 表明，对于 x≤y，c[x]与 c[y]的关系要么是互不相交，要么是 c[x]包含于 c[y]；
性质 2 指出 c[x]真包含于 c[x+lowbit(x)]；
性质 3 说明，对任意满足 x<y<x+lowbit(x)的情况，c[x]和 c[y]互不相交。

//模板1，单点修改和区间和查询
int lowbit(int x)
{
    int a = x & (-x);
    return a;
}
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    vector<int>data(n + 1,0);
    for (int i = 1; i <= n; i++)
    {
        cin >> data[i];
    }
   
    for (int i = 2; i <= n; i++)
    {
        data[i] += data[i - 1];
    }

    vector<int>tree(n + 1);
    for (int i = 1; i <= n; i++)
    {
        tree[i] = data[i] - data[i - lowbit(i)];
    }

    for (int i = 0; i < m; i++)
    {
        int n1, x, y;
        cin >> n1>>x>>y;
        if (n1 == 1)//单点修改
        {
            while (x <= n)
            {
                tree[x] += y;
                x += lowbit(x);
            }


        }
        if (n1 == 2)//区间查询
        {
            int num1 = 0;
            while (y > 0)
            {
                num1 += tree[y];
                y -= lowbit(y);
            }
            int num2 = 0;
            int x1 = x - 1;
            while (x1 > 0)
            {
                num2 += tree[x1];
                x1 -= lowbit(x1);

            }
            cout << num1 - num2 << endl;


        }


    }



//模板2，利用差分实现区间修改和单点查询

int lowbit(int x)
{
    return (x & (-x));
}
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, m;
    cin >> n >> m;
    vector<int>tree(n + 1, 0);
    int* p = new int[n+1];
    p[0] = 0;
    int* diff = new int[n + 1];
    for1 cin >> p[i];
    for1 diff[i] = p[i]-p[i-1];

    for (int i = 1; i <= n; i++)
    {
        tree[i] += diff[i];
        if (i + lowbit(i) <= n) tree[i + lowbit(i)] += tree[i];
    }//另一种o(n)建树

    while (m--)
    {
        int index;
        cin >> index;
        if (index == 1)
        {

            int x, y, k;
            cin >> x >> y >> k;


            while (x <= n)
            {
                tree[x] += k;
                x += lowbit(x);
            }
            y += 1;
            while (y <= n)
            {
                tree[y] -= k;
                y += lowbit(y);
            }

        }
        else
        {

            int x;
            cin >> x;
            int ans = 0;
            while (x > 0)
            {
                ans += tree[x];
                x -= lowbit(x);
            }

            cout << ans << endl;

        }

    }
    dl diff;
   dl p;

}



}
