#include<iostream>
#include <cmath>
#include <algorithm>
#include <map>
#include<vector>
#include <string>
#include<functional>
#include <set>
#include<bitset>
#include<climits>
#include<queue>
using namespace std;
#define int long long
#define itn long long
#define for1 for(int i=1;i<=n;i++)
#define for0 for(int i=0;i<n;i++)
#define dl delete []
int fx[] = { -1,0,1,0 };
int fy[] = { 0,1,0,-1 };
#define MOD1 998244353
int MOD2 = 1e9 + 7;
int lowbit(int x)
{
    return x & (-x);
}
vector<vector<int>> fastmatrix(int n, int k, vector<vector<int>>p, vector<vector<int>>ans)//p^k为ans，且为n阶矩阵
{

    while (k)
    {
        if (k & 1)
        {
            vector<vector<int>>temp1(n + 1, vector<int>(n + 1, 0));

            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    for (int m = 1; m <= n; m++) {
                        temp1[i][j] = (temp1[i][j] + ans[i][m] * p[m][j]) % MOD2;
                    }
                }
            }


            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    ans[i][j] = temp1[i][j];
                }
            }


        }


        vector<vector<int>>temp2(n + 1, vector<int>(n + 1, 0));

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                for (int m = 1; m <= n; m++) {
                    temp2[i][j] = (temp2[i][j] + p[i][m] * p[m][j]) % MOD2;
                }
            }
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                p[i][j] = temp2[i][j];
            }
        }


        k >>= 1;
    }
    return ans;

}
signed main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n, k;
    cin >> n >> k;

    vector<vector<int>>ans(n + 1, vector<int>(n + 1, 0));
    for1
    {
        for (int j = 1; j <= n; j++)
        {
            if (i == j) ans[i][j] = 1;
            else ans[i][j] = 0;
        }
    }

    vector<vector<int>>p(n + 1, vector<int>(n + 1, 0));
    for1
    {
        for (int j = 1; j <= n; j++)
        {
            cin >> p[i][j];
        }
    }


    ans = fastmatrix(n, k, p, ans);


    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }





    return 0;
}

